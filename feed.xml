<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Bart van Raaij’s blog</title>
    <subtitle>Bart van Raaij’s blog about web development and other tech stuff.</subtitle>
    <link href="https://bartvanraaij.dev/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://bartvanraaij.dev" rel="alternate" type="text/html"/>
    
    <updated>2022-12-04T00:00:00Z</updated>
    
    <id>https://bartvanraaij.dev/</id>
    <author>
        <name>Bart van Raaij</name>
        <email>info@bartvanraaij.nl</email>
    </author>
        <entry>
            <title>De Bevrijding van Antonius</title>
            <link href="https://bartvanraaij.dev/2022-12-04-de-bevrijding-van-antonius/"/>
            <updated>2022-12-04T00:00:00Z</updated>
            <id>https://bartvanraaij.dev/2022-12-04-de-bevrijding-van-antonius/</id>
            <content type="html"><![CDATA[
                <p>In het holst van de nacht, ergens eind november, stond een oude man op een kerkplein. Hij keek gespannen om zich heen. Het was koud, en ondanks zijn lange baard voelde de wind guur in zijn gezicht. Hij zette zijn enorme wandelstok even naast zich neer en stak zijn handen in zijn zakken. Hij voelde een vreemd voorwerp. “Oh ja, die moet ik nog terugleggen in de gereedschapskist”, dacht de man. De man keek nogmaals omhoog naar de klok op de kerktoren. Hij had om klokslag twee uur afgesproken met een oude vriend, maar het was inmiddels al tien over twee en de vriend was nog nergens te bekennen… Waar bleef hij toch?</p>
<p>Misschien kon hij het niet vinden, dacht de man. Dat zou wel behoorlijk ironisch zijn, want het vinden van zaken was immers de specialiteit van zijn compaan. Lang geleden, in iets dat haast een vorig leven leek, waren de mannen collega’s geweest. Met hun bijzondere gaven droegen ze als onderdeel van een magisch bondgenootschap dagelijks bij aan de welvaart en vrede van mensen op aarde. Van de hoogtijdagen van weleer was echter niet veel meer over.  Na honderden jaren vol armoede en oorlog had de mensheid zich juist tegen hen gekeerd, men zocht nu vooral naar antwoorden in de wetenschap en technologie.
Verguisd en verbannen leefden zij, leden van de Orde der Onsterfelijken, nu een bestaan in de schaduw.</p>
<p>Alhoewel… De man op het kerkplein, Nicolaas, durfde zich sinds enkele decennia jaar weer korte periodes in het publiek te vertonen. In zijn traditionele kledij deed hij elk jaar Nederland aan. Hij nam dan een karrevracht aan snoep en cadeaus mee, om zijn goede intenties te laten blijken. Zijn magische gave uitte zich in een praktisch oneindig vermogen, dus dat was voor hem een kleine moeite. En het werkte! De Nederlanders ontvingen hem jaarlijks met open armen, sterker nog, ze vereerden hem. Hij genoot ervan om mensen gelukkig te maken, en had weer echt de zin van het leven gevonden.<br />
Dat gold echter niet voor zijn oude vriend. Die had altijd al moeite gehad met zijn bijzondere gave, en leefde een teruggetrokken bestaan. Gisteravond had hij Nicolaas opgebeld, en met trillende stem gevraagd of ze elkaar konden ontmoeten. Het kwam Nicolaas eigenlijk erg slecht uit, hij zat net in z’n drukke Nederland-periode. Maar toch zegde hij toe, het was immers zijn oudste vriend.</p>
<p>Nicolaas dacht terug aan het telefoongesprek, toen hij plots een figuur de hoek om zag komen. Nicolaas’ hart maakte een sprongetje, en riep:<br />
“Antonius, beste vrind!” —<br />
“Ssst! Niet zo luid” zei Antonius. “En noem me alsjeblieft gewoon Toon.”<br />
“Wat ben ik blij je te zien Toon! Kom, laten we een stukje wandelen.”</p>
<p>Samen liepen de oude mannen de straat uit, en namen plaats op een bankje onder een oude boom. Pas toen ze zaten zag Nicolaas onder het lantaarnlicht hoe slecht Antonius eruit zag. Zijn gezicht ingevallen, zijn huid grijs en bleek.<br />
“Wat is er met je aan de hand Toon”, vroeg Nicolaas.<br />
“Ik… ik kan het niet meer aan Nico”, antwoordde Antonius. “Altijd als ik in de buurt ben van mensen, vind ik dingen niet gevonden zouden moeten worden. Geheimen, leugens, bonnetjes van ministers. Het drukt zo zwaar op mijn gemoed. En om zinvolle dingen te <em>vinden</em> gebruikt men nu technologie zoals <em>Google</em> en <em>Zoek mijn iPhone</em>. Ik zeg het je, het is helemaal niet leuk om <em>zoeken</em> en <em>vinden</em> als magische gave te hebben. Ik zou zo graag gewóón zijn!”<br />
Nicolaas zei: “Ach Toon toch… ik weet dat je het zwaar hebt. Maar er zijn vast toch ook wel mooie dingen in het leven?”<br />
“Nee, Nico, ik heb er heel lang over nagedacht, en ik ben vastberaden. Ik wil de Bevrijdingsspreuk uitvoeren! En daar heb ik jouw hulp bij nodig.”<br />
“Maar”, zei Nicolaas aarzelend, “dat betekent dat je je onsterfelijkheid opgeeft. Weet je dat wel zeker?”<br />
“Ja, heel zeker.”<br />
Nicolaas dacht een paar tellen na, maar zag het verlangen van zijn vriend in zijn ogen en zei toen:
“Goed dan. Zoals je weet hebben een voorwerp nodig om jouw krachten in over te dragen. Heb je iets in gedachten?”<br />
“Het maakt mij niet uit”, zei Antonius, “heb jij toevallig iets bij je?”<br />
Ineens herinnerde Nicolaas zich iets. “Ja! Toevallig wel!”, zei hij en haalde de schroevendraaier uit zijn zak.<br />
Antonius keek even vreemd op, maar lachte toen en zei: “Een schroevendraaier? Ja, waarom ook niet!”</p>
<p>In de verte zag Nicolaas een lamp aangaan. “Laten we haast maken, voordat we gezien worden” zei hij, en hij gaf het stuk gereedschap aan Antonius.<br />
Antonius vouwde zijn handen om de schroevendraaier, sloot zijn ogen, rechtte zijn rug, en sprak de woorden:<br />
<em>“Bij deze plaats ik, Heilige Antonius, al mijn magische kracht in dit alledaagse voorwerp.<br />
Ik zal al mijn krachten nu opgeven – in ruil voor een sterfelijk leven.”</em></p>
<p>Nicolaas vervolgde:<br />
<em>“Antonius, je wordt nu van je kracht bevrijd – en raakt het in dit voorwerp kwijt.<br />
Heilige Antonius, beste vrind, ik zorg dat jij je rust terugvindt.”</em></p>
<p>Om de spreuk te bekrachtigen hield Nicolaas zijn gouden staf boven Antonius’ handen en de schroevendraaier. De staf gloeide rood-oranje op,  en er ontstond een lichtbol ongeveer zo groot als een voetbal. Daarna werd de lichtbol kleiner en kleiner, tot een piepklein lichtbolletje dat zich nestelde in de schroevendraaier.</p>
<p>Antonius opende zijn ogen.
Met tranen van geluk en een glimlach gaf hij het lichtgevende schroevendraaiertje terug aan Nicolaas.<br />
“Dankjewel”, zei hij, en hij verdween in de duisternis.</p>
<p>De volgende ochtend zocht Nicolaas in zijn Grote Boek naar een geschikt persoon om de schroevendraaier cadeau te doen, en vond de naam:<br />
Tom van der Ven, Sambeek.</p>

            ]]></content>
        </entry>
        <entry>
            <title>Converting UTF-8 strings to ASCII using the ICU Transliterator</title>
            <link href="https://bartvanraaij.dev/2020-10-17-converting-utf8-strings-to-ascii-using-icu-transliterator/"/>
            <updated>2020-10-17T00:00:00Z</updated>
            <id>https://bartvanraaij.dev/2020-10-17-converting-utf8-strings-to-ascii-using-icu-transliterator/</id>
            <content type="html"><![CDATA[
                <p>With the general availability and widespread support of UTF-8, character encoding issues are thankfully becoming a problem of the past. But unfortunately there are still tons of legacy systems out there that don’t support it.</p>
<p>I ran into this exact problem quite recently. I had built a “Book an appointment” form for a client. All user input, including the customer’s name, is sent to the client’s legacy CRM via a proprietary HTTP API.  It turned out that said CRM only accepts <a href="https://en.wikipedia.org/wiki/ASCII" title="ASCII" target="_blank" rel="noopener">ASCII</a> ☹️. That’s right: <em>Just</em> ASCII, not even <a href="https://en.wikipedia.org/wiki/Extended_ASCII" title="Extended ASCII" target="_blank" rel="noopener">Extended ASCII</a>. Any attempt to send a string with non-ASCII characters resulted in an HTTP 400-error. That meant that people with names like Bjørn or François couldn’t use that form — because those names contain non-ASCII characters.  Naturally, it is not acceptable by any means to exclude Bjørn and François from using our form just because their names contain letters that don’t appear on a <a href="https://en.wikipedia.org/wiki/Teletype_Model_33" target="_blank" rel="noopener">1960s teletypewriter</a>.</p>
<p>I consulted with the client but sadly the problem couldn’t (or wouldn’t) be fixed on their end, and they asked if I could provide a solution. So I needed to come up with a way to transform or convert the user’s input into ASCII.</p>
<h2 id="the-desired-result"><a class="anchor" href="https://bartvanraaij.dev/2020-10-17-converting-utf8-strings-to-ascii-using-icu-transliterator/#the-desired-result">#</a> The desired result</h2>
<p>First, let’s define what the actual desired result is. I’ll be using this fictitious name:  <code>Daniël Renée François Bjørn in’t Veld</code>.  Every word in this string has a non-ASCII character. If we need to convert this string to ASCII, we should find characters that look similar. To be precise, I want the end result to be: <code>Daniel Renee Francois Bjorn in't Veld</code>.  In my opinion that is as close as we can get.</p>
<p><strong>At this point I want to stress that if you have a viable way to refrain from having to convert user input (e.g., someone’s name), you absolutely should!</strong>
In other words: if someone is called Bjørn, please go out of your way to make sure your systems call them Bjørn. Someone’s name is part of their identity and not something you want to mess up. I for one already get annoyed when a system autocapitalises my surname into “Van Raaij”. Imagine my frustration if I were to be called “B@rt” just because a system doesn’t have the <code>a</code> character in their character set.</p>
<p>That being said: given the choice between a) not being able to use a form or service at all or b) being called Bjorn, I’m sure that Bjørn would choose the latter.</p>
<p>Enough talk, let’s code! Converting a UTF-8 string to ASCII can’t be hard, right?</p>
<p><em>Note: I’ll be using PHP, but the examples are applicable to other languages as well.</em></p>
<h2 id="the-obvious-choice%3A-iconv"><a class="anchor" href="https://bartvanraaij.dev/2020-10-17-converting-utf8-strings-to-ascii-using-icu-transliterator/#the-obvious-choice%3A-iconv">#</a> The obvious choice: iconv</h2>
<p>If you search for <em>php utf8 to ascii</em> <a href="https://www.php.net/manual/en/function.iconv.php" target="_blank" rel="noopener"><code>iconv</code></a> is the first function that pops up:</p>
<blockquote class="c-php-doc">
<p>iconv — Convert string to requested character encoding</p>
<p><code>iconv ( string $in_charset , string $out_charset , string $str ) : string</code></p>
<p>Performs a character set conversion on the string <code>str</code> from <code>in_charset</code> to <code>out_charset</code>.</p>
</blockquote>
<p>As the <a href="https://www.php.net/manual/en/function.iconv.php" target="_blank" rel="noopener">documentation</a> states, there are three ‘modes’ in which iconv can operate: <em>plain</em>, <em>IGNORE</em> and <em>TRANSLIT</em>. Let’s not waste any time and put it to the test:</p>
<pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><br /><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Daniël Renée François Bjørn in’t Veld'</span><span class="token punctuation">;</span><br /><br /><span class="token variable">$plain</span>    <span class="token operator">=</span> <span class="token function">iconv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"UTF-8"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"ASCII"</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token variable">$ignore</span>   <span class="token operator">=</span> <span class="token function">iconv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"UTF-8"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"ASCII//IGNORE"</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token variable">$translit</span> <span class="token operator">=</span> <span class="token function">iconv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"UTF-8"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"ASCII//TRANSLIT"</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br /><br /><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$plain</span><span class="token punctuation">,</span> <span class="token variable">$ignore</span><span class="token punctuation">,</span> <span class="token variable">$translit</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p class="c-code-example-link"><a href="https://3v4l.org/RREJl" target="_blank" rel="noopener">Run this code example on 3v4l.org »</a></p>
<p>Output:</p>
<pre class="language-md"><code class="language-md">Notice: iconv(): Detected an illegal character in input string in /in/RREJl on line 4<br />bool(false)<br />string(32) "Danil Rene Franois Bjrn int Veld"<br />string(37) "Dani?l Ren?e Fran?ois Bj?rn in't Veld"</code></pre>
<p>Well, that’s disappointing:</p>
<ul>
<li>The <em>plain</em> mode triggered an <code>E_NOTICE</code> and returned <code>false</code>. It means that iconv detected one or  more characters that it couldn’t fit into the output charset, and it just gave up;</li>
<li>The <em>IGNORE</em> mode simply discarded the characters it couldn’t fit into ASCII;</li>
<li>The <em>TRANSLIT</em> mode tried to replace the non-ASCII characters with similarly looking ASCII characters, but failed. Except for <code>’</code> — the
<a href="https://www.compart.com/en/unicode/U+2019" target="_blank" rel="noopener">Right Single Quotation Mark</a>, which is not uncommon in
Dutch surnames — they’re all replaced by a question mark.</li>
</ul>
<p>The PHP docs warn that this may happen: <em>“TRANSLIT conversion is likely to fail for characters which are illegal for the out_charset.”</em> And if you read the comments in the documentation you’ll find that iconv’s <em>TRANSLIT</em> mode behaves very inconsistently between different systems. So apparently we can’t rely on iconv’s <em>TRANSLIT</em> mode at all.</p>
<p>Technically I could’ve used the <em>IGNORE</em> mode of iconv and be done with it. It doesn’t contain any non-ASCII characters anymore so my API call wouldn’t fail anymore. But it’s not the result I set out for. Again: if my name is Bjørn, I want to be called Bjørn, I can live with “Bjorn” but not “Bjrn” and certainly not “Bj?rn”.</p>
<h2 id="transliteration"><a class="anchor" href="https://bartvanraaij.dev/2020-10-17-converting-utf8-strings-to-ascii-using-icu-transliterator/#transliteration">#</a> Transliteration</h2>
<p>Although iconv’s <em>TRANSLIT</em> mode doesn’t seem usable, I feel we are on the right track with <em>transliteration</em>. So what exactly is transliteration?</p>
<p>Transliteration, in the general sense of the word, is “conversion of a text from one script to another that involves swapping letters in predictable ways” (<a href="https://en.wikipedia.org/wiki/Transliteration" target="_blank" rel="noopener">Wikipedia</a>). It is, for example, the conversion of <code>Игорь Стравинский</code> (Cyrillic script) to <code>Igor Stravinsky</code> (Latin script).</p>
<p>Now think of a character set as a script, and immediately it makes sense to use transliteration to convert text from one character set to another. The character <code>ø</code> is in the UTF-8 ‘script’ but not in ASCII. Transliterating UTF-8 to ASCII would mean to find an ASCII-character that represents that character as good as possible.</p>
<p>Is it possible to perform these kinds of transliteration programmatically? Yes, it is!</p>
<h2 id="international-components-for-unicode-(icu)"><a class="anchor" href="https://bartvanraaij.dev/2020-10-17-converting-utf8-strings-to-ascii-using-icu-transliterator/#international-components-for-unicode-(icu)">#</a> International Components for Unicode (ICU)</h2>
<p>Enter <em>ICU</em>. The <a href="https://unicode-org.github.io/icu/userguide/icufaq/#what-is-icu" target="_blank" rel="noopener"><em>International Components for Unicode</em></a> constitute a “cross-platform Unicode based globalisation library” with components for “locale-sensitive string comparison, date/time/number/currency/message formatting, text boundary detection, character set conversion and so on”. It’s built and provided by the <a href="https://github.com/unicode-org" target="_blank" rel="noopener">Unicode Consortium</a> as C/C++ and Java libraries, but wrappers exist for <a href="http://site.icu-project.org/related" target="_blank" rel="noopener">plenty of other languages</a>, including PHP. In PHP it’s better known as the <a href="https://www.php.net/manual/en/intro.intl.php" target="_blank" rel="noopener">Internationalization extension</a>, or <code>ext-intl</code>.</p>
<p>Speaking of which, this sentence on the ICU Related Projects page made me smile:</p>
<blockquote>
<p>“The upcoming PHP 6 language is expected to support Unicode through ICU4C”.</p>
</blockquote>
<p>As you may know PHP 6 <a href="https://ma.ttias.be/php6-missing-version-number/" target="_blank" rel="noopener">never saw the light of day</a> but it <em>did</em> <a href="https://www.phproundtable.com/episode/what-happened-to-php-6" target="_blank" rel="noopener">lay the groundwork for the intl extension</a>.</p>
<p>I could probably write a blog post for each and every component in the ICU library (I find internationalisation mighty interesting), but let’s focus and see if the ICU Transliterator can help us in our quest to correctly converting UTF8 to ASCII.</p>
<h2 id="using-the-icu-transliterator"><a class="anchor" href="https://bartvanraaij.dev/2020-10-17-converting-utf8-strings-to-ascii-using-icu-transliterator/#using-the-icu-transliterator">#</a> Using the ICU Transliterator</h2>
<p>Let’s dive right in. The PHP function we’re looking for is <a href="https://www.php.net/manual/en/transliterator.transliterate.php" target="_blank" rel="noopener"><code>transliterator_transliterate</code></a>:</p>
<blockquote class="c-php-doc">
<p>transliterator_transliterate — Transliterate a string</p>
<p><code>transliterator_transliterate ( mixed $transliterator , string $subject [, int $start [, int $end ]] )</code></p>
<p>Transforms a string or part thereof using an ICU transliterator.</p>
</blockquote>
<p><em>Note: I’m using the procedural function here for brevity, but PHP also provides a <code>Transliterator</code>  class.</em></p>
<p>The function call looks pretty straightforward at first, but the <code>$transliterator</code> parameter is where it gets a bit tricky. The docs are fairly brief and don’t give much guidance, but fortunately the <a href="https://unicode-org.github.io/icu/userguide/transforms/general/#icu-transliterators" target="_blank" rel="noopener">ICU docs provide some insights</a>:</p>
<blockquote>
<p>Latin-ASCII: Converts non-ASCII-range punctuation, symbols, and Latin letters in an approximate ASCII-range equivalent.</p>
</blockquote>
<p>Jackpot? Let’s try!</p>
<pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><br /><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Daniël Renée François Bjørn in’t Veld'</span><span class="token punctuation">;</span><br /><br /><span class="token variable">$translitRules</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Latin-ASCII'</span><span class="token punctuation">;</span><br /><span class="token variable">$nameAscii</span> <span class="token operator">=</span> <span class="token function">transliterator_transliterate</span><span class="token punctuation">(</span><span class="token variable">$translitRules</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br /><br /><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$nameAscii</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p class="c-code-example-link"><a href="https://3v4l.org/ck1jT" target="_blank" rel="noopener">Run this code example on 3v4l.org »</a></p>
<p>Output:</p>
<pre class="language-md"><code class="language-md">string(37) "Daniel Renee Francois Bjorn in't Veld"</code></pre>
<p>That’s it 👏 🥳! The ICU Transliterator produced our exact desired output! No warnings, errors or unexpected side effects. Mission accomplished!</p>
<h2 id="real-transliteration"><a class="anchor" href="https://bartvanraaij.dev/2020-10-17-converting-utf8-strings-to-ascii-using-icu-transliterator/#real-transliteration">#</a> Real transliteration</h2>
<p>Or is it? Remember Igor Stravinsky? What if he was to use my form and entered his name in Cyrillic script instead of Latin? With our current implementation, this won’t work, the output will simply be <code>Игорь Стравинский</code>.
This is because we only told the transliterator to convert Latin characters to ASCII, so it will leave the Cyrillic characters unaffected. However, we can apply multiple transliteration rules, like so:</p>
<pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><br /><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Игорь Стравинский'</span><span class="token punctuation">;</span><br /><br /><span class="token variable">$translitRules</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Any-Latin; Latin-ASCII;'</span><span class="token punctuation">;</span><br /><span class="token variable">$nameAscii</span> <span class="token operator">=</span> <span class="token function">transliterator_transliterate</span><span class="token punctuation">(</span><span class="token variable">$translitRules</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br /><br /><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$nameAscii</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p class="c-code-example-link"><a href="https://3v4l.org/2AiNk" target="_blank" rel="noopener">Run this code example on 3v4l.org »</a></p>
<p>Output:</p>
<pre class="language-md"><code class="language-md">string(17) "Igor' Stravinskij"</code></pre>
<p>By prepending the <code>Any-Latin</code> transform rule, the transliterator first converts text from any script into Latin script and then converts the Latin text into ASCII using <code>Latin-ASCII</code>. Both instructions are separated by a semicolon. That’s it! That’s our end mark.</p>
<p>With these few simple lines of PHP code, I have now found a simple yet reliable way to correctly transform any text into ASCII. Without hesitation I wrote a helper function using this code, made sure that all user input in my customer’s form was passed through this function and end-to-end tested my form again. And as you might expect: the API call worked again and my customer was happy with my solution. All done!</p>
<p><em>Note: The result of the <code>Any-Latin</code> transform may not exactly be what you would’ve expected, as that would’ve been <code>Igor Stravinsky</code>. This can be explained by the fact that transliteration between scripts isn’t an exact science: “there are multiple incompatible standards and in reality transliteration is often carried out without any uniform standards” (<a href="https://en.wikipedia.org/wiki/Romanization_of_Russian#Systematic_transliterations_of_Cyrillic_to_Latin" target="_blank" rel="noopener">Wikipedia</a>). For example: on <a href="https://it.wikipedia.org/wiki/Igor%27_F%C3%ABdorovi%C4%8D_Stravinskij" target="_blank" rel="noopener">the Italian Wikipedia page for Igor Stravinsky</a> his name is written exactly like the output above whereas “Igor Stravinsky” is written on the English page.</em></p>
<h2 id="bonus-tip%3A-a-transliteration-powered-slugify-function"><a class="anchor" href="https://bartvanraaij.dev/2020-10-17-converting-utf8-strings-to-ascii-using-icu-transliterator/#bonus-tip%3A-a-transliteration-powered-slugify-function">#</a> Bonus tip: a transliteration-powered slugify function</h2>
<p>So far I have used two relatively simple transliterator instructions: <code>Any-Latin</code> and <code>Latin-ASCII</code>. The ICU Transliterator is far more powerful, however.</p>
<p>I’ll leave you with a final bonus tip: here’s a slugify function that uses the ICU Transliterator to create a slug (an SEO-friendly human-readable url part) from any arbitrary string:</p>
<pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><br /><span class="token keyword">function</span> <span class="token function-definition function">slugify</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span><br /><span class="token punctuation">{</span><br />    <span class="token variable">$translitRules</span> <span class="token operator">=</span> <span class="token punctuation">[</span><br />        <span class="token string double-quoted-string">":: Any-Latin"</span><span class="token punctuation">,</span><br />        <span class="token string double-quoted-string">":: [:Nonspacing Mark:] Remove"</span><span class="token punctuation">,</span><br />        <span class="token string double-quoted-string">":: [:Punctuation:] Remove"</span><span class="token punctuation">,</span><br />        <span class="token string double-quoted-string">":: [:Symbol:] Remove"</span><span class="token punctuation">,</span><br />        <span class="token string double-quoted-string">":: Latin-ASCII"</span><span class="token punctuation">,</span><br />        <span class="token string double-quoted-string">":: Lower()"</span><span class="token punctuation">,</span><br />        <span class="token string double-quoted-string">"' ' {' '} > "</span><span class="token punctuation">,</span><br />        <span class="token string double-quoted-string">"::NULL"</span><span class="token punctuation">,</span><br />        <span class="token string double-quoted-string">"[:Separator:] > '-'"</span><span class="token punctuation">,</span><br />    <span class="token punctuation">]</span><span class="token punctuation">;</span><br />    <span class="token variable">$transliterator</span> <span class="token operator">=</span>  <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Transliterator</span><span class="token operator">::</span><span class="token function">createFromRules</span><span class="token punctuation">(</span><br />        <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">';'</span><span class="token punctuation">,</span> <span class="token variable">$translitRules</span><span class="token punctuation">)</span><br />    <span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token keyword">return</span> <span class="token variable">$transliterator</span><span class="token operator">-></span><span class="token function">transliterate</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span><br /><br /><span class="token variable">$title</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;?php François😎: _+ / Стравинский`😜.'</span><span class="token punctuation">;</span><br /><span class="token variable">$slug</span> <span class="token operator">=</span> <span class="token function">slugify</span><span class="token punctuation">(</span><span class="token variable">$title</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$slug</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p class="c-code-example-link"><a href="https://3v4l.org/Hr0iJ" target="_blank" rel="noopener">Run this code example on 3v4l.org »</a></p>
<p>Output:</p>
<pre class="language-md"><code class="language-md">string(24) "php-francois-stravinskij"</code></pre>
<p>I won’t get into details as to how this works because this article is long enough as it is. At this point I encourage you to read more about the ICU Transliterator and experiment with it yourself!</p>
<h2 id="conclusion"><a class="anchor" href="https://bartvanraaij.dev/2020-10-17-converting-utf8-strings-to-ascii-using-icu-transliterator/#conclusion">#</a> Conclusion</h2>
<p>What can we conclude from this? I think the ICU Transliterator proves to be a valuable tool not only to convert text from one script to another but also to convert strings between character sets. Its output is more reliable than that of <code>iconv</code> and even far more extensive conversions are possible.</p>
<p>Do you have any questions, comments or tips following this article? Feel free to reach out to me <a href="https://twitter.com/bartvanraaij" target="_blank" rel="noopener">on Twitter</a>!</p>
<p>Thank you for reading my first-ever technical blog post. 😇</p>
<h2 id="further-reading-and-interesting-links"><a class="anchor" href="https://bartvanraaij.dev/2020-10-17-converting-utf8-strings-to-ascii-using-icu-transliterator/#further-reading-and-interesting-links">#</a> Further reading and interesting links</h2>
<ul>
<li><a href="https://research.google/pubs/pub36450/" target="_blank" rel="noopener">“Proper Name Transliteration with ICU Transforms”</a> — A research study by Sascha Brawer Martin Jansche Hiroshi Takenaka Yui Terashima (Google), presented at the 34th Internationalization &amp; Unicode Conference in 2010;</li>
<li><a href="http://www.open-std.org/jtc1/sc22/wg20/docs/n915-transliteration-icu.pdf" target="_blank" rel="noopener">“Transliteration in ICU”</a> — Slides and transcript of a presentation by Mark Davis and Alan Liu at the 19th International Unicode Conference in 2001;</li>
<li>The official <a href="https://unicode-org.github.io/icu/" target="_blank" rel="noopener">ICU Documentation</a>, <a href="http://userguide.icu-project.org/transforms/general" target="_blank" rel="noopener">the old ICU documentation</a> and <a href="https://github.com/unicode-org/icu" target="_blank" rel="noopener">ICU on GitHub</a>;</li>
<li><a href="https://www.php.net/manual/en/class.transliterator.php" target="_blank" rel="noopener">PHP Transliterator</a> in the PHP documentation;</li>
<li><a href="https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/" target="_blank" rel="noopener">“Falsehoods Programmers Believe About Names”</a> — a must-read article by Patrick McKenzie;</li>
<li><a href="https://open.spotify.com/track/3ZHZmrK9ZD9WAfBcgjz2Gs?si=v-POCuUCRxSEHo3cXUg8vA" target="_blank" rel="noopener">Listen to The Final Hymn</a> of Igor Stravinsky’s “The Firebird” suite on Spotify, performed by the Dutch Royal Concertgebouw Orchestra.</li>
</ul>

            ]]></content>
        </entry></feed>
